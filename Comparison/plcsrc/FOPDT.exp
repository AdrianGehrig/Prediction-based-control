(*
 *
 * File: FOPDT.exp
 *
 * IEC 61131-3 Structured Text (ST) code generated for subsystem "FOPDT/Subsystem"
 *
 * Model name                      : FOPDT
 * Model version                   : 1.1
 * Model creator                   : Trips
 * Model last modified by          : Trips
 * Model last modified on          : Tue Feb 26 09:03:38 2019
 * Model sample time               : 1s
 * Subsystem name                  : FOPDT/Subsystem
 * Subsystem sample time           : 1s
 * Simulink PLC Coder version      : 2.6 (R2018b) 24-May-2018
 * ST code generated on            : Tue Feb 26 09:04:55 2019
 *
 * Target IDE selection            : 3S CoDeSys 2.3
 * Test Bench included             : No
 *
 *)
FUNCTION_BLOCK Subsystem
VAR_INPUT
    ssMethodType: SINT;
    FOPD_Input: LREAL;
    Gain_System1: LREAL;
    Time_Constant_System1: LREAL;
    Sample_Time: LREAL;
    Dead_Time: UDINT;
END_VAR
VAR_OUTPUT
    FOPD_Output: LREAL;
END_VAR
VAR
    Divide: LREAL;
    DiscreteTransferFcn_states: LREAL;
    c_TmpSignalConversionAtDisc: ARRAY [0..1] OF LREAL;
    Delay_DSTATE: ARRAY [0..799] OF LREAL;
END_VAR
VAR_TEMP
    rtb_DiscreteTransferFcn: LREAL;
    i: DINT;
END_VAR
CASE ssMethodType OF
    SS_INITIALIZE: 
        (* InitializeConditions for DiscreteTransferFcn: '<S1>/Discrete Transfer Fcn' *)
        DiscreteTransferFcn_states := 0.0;
        (* InitializeConditions for Delay: '<S1>/Delay' *)
        FOR i := 0 TO 799 DO 
            Delay_DSTATE[i] := 0.0;
        END_FOR;
        (* End of InitializeConditions for Delay: '<S1>/Delay' *)
    SS_STEP: 
        (* Product: '<S1>/Divide' *)
        Divide := Gain_System1 / Time_Constant_System1;
        (* SignalConversion: '<S1>/TmpSignal ConversionAtDiscrete Transfer FcnInport3' incorporates:
         *  Constant: '<S1>/Constant'
         *  Gain: '<S1>/Gain'
         *  Gain: '<S1>/Gain1'
         *  Math: '<S1>/Exp'
         *  Product: '<S1>/Divide1'
         *
         * About '<S1>/Exp':
         *  Operator: exp *)
        c_TmpSignalConversionAtDisc[0] := 1.0;
        c_TmpSignalConversionAtDisc[1] :=  -EXP(( -Sample_Time) / Time_Constant_System1);
        (* DiscreteTransferFcn: '<S1>/Discrete Transfer Fcn' *)
        rtb_DiscreteTransferFcn := Divide * DiscreteTransferFcn_states;
        (* Delay: '<S1>/Delay' *)
        IF Dead_Time <= 0 THEN 
            (* Outport: '<Root>/FOPD_Output' *)
            FOPD_Output := rtb_DiscreteTransferFcn;
        ELSE 
            IF Dead_Time > 800 THEN 
                i := 800;
            ELSE 
                i := UDINT_TO_DINT(Dead_Time);
            END_IF;
            (* Outport: '<Root>/FOPD_Output' *)
            FOPD_Output := Delay_DSTATE[800 - DINT_TO_UDINT(i)];
        END_IF;
        (* End of Delay: '<S1>/Delay' *)
        
        (* Update for DiscreteTransferFcn: '<S1>/Discrete Transfer Fcn' *)
        DiscreteTransferFcn_states := FOPD_Input - (c_TmpSignalConversionAtDisc[1] * DiscreteTransferFcn_states);
        (* Update for Delay: '<S1>/Delay' *)
        FOR i := 0 TO 798 DO 
            Delay_DSTATE[i] := Delay_DSTATE[i + 1];
        END_FOR;
        Delay_DSTATE[799] := rtb_DiscreteTransferFcn;
        (* End of Update for Delay: '<S1>/Delay' *)
END_CASE;
END_FUNCTION_BLOCK
VAR_GLOBAL CONSTANT
    SS_INITIALIZE: SINT := 0;
    SS_STEP: SINT := 1;
END_VAR
