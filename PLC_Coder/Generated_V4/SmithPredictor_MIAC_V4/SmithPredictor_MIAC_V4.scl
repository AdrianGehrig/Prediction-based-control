(*
 *
 * File: SmithPredictor_MIAC_V4.scl
 *
 * IEC 61131-3 Structured Text (ST) code generated for subsystem "SmithPredictor_MIAC_V4/SmP_MIAC"
 *
 * Model name                      : SmithPredictor_MIAC_V4
 * Model version                   : 1.142
 * Model creator                   : Trips
 * Model last modified by          : Trips
 * Model last modified on          : Sat Mar 16 22:10:06 2019
 * Model sample time               : 1s
 * Subsystem name                  : SmithPredictor_MIAC_V4/SmP_MIAC
 * Subsystem sample time           : 1s
 * Simulink PLC Coder version      : 2.6 (R2018b) 24-May-2018
 * ST code generated on            : Sat Mar 16 22:17:40 2019
 *
 * Target IDE selection            : Siemens SIMATIC Step 7
 * Test Bench included             : No
 *
 *)
TYPE c_c_recursiveEstimat
    STRUCT
        IteratorPosition: DINT;
    END_STRUCT
END_TYPE
TYPE c_d_recursiveEstimat
    STRUCT
        OutputDataIterator: c_c_recursiveEstimat;
        InputDataIterator: c_c_recursiveEstimat;
    END_STRUCT
END_TYPE
FUNCTION_BLOCK b_ZCFCN_d_RISING
VAR_INPUT
    u0: INT;
    u1: REAL;
END_VAR
VAR_OUTPUT
    y0: DINT;
    y1: INT;
END_VAR
VAR
    rising: BOOL;
    temp1: BOOL;
    temp2: BOOL;
END_VAR
temp1 := FALSE;
IF u1 > 0.0 THEN 
    y1 := 1;
ELSIF u1 < 0.0 THEN 
    y1 := 2;
ELSE 
    y1 := 0;
END_IF;
temp2 := FALSE;
IF u0 = 2 THEN 
    IF y1 = 0 THEN 
        rising := TRUE;
    ELSIF y1 = 1 THEN 
        rising := TRUE;
    ELSE 
        temp2 := TRUE;
    END_IF;
ELSE 
    temp2 := TRUE;
END_IF;
IF temp2 THEN 
    IF u0 = 0 THEN 
        IF y1 = 1 THEN 
            rising := TRUE;
        ELSE 
            temp1 := TRUE;
        END_IF;
    ELSE 
        temp1 := TRUE;
    END_IF;
END_IF;
IF temp1 THEN 
    IF u0 = 101 THEN 
        IF y1 = 1 THEN 
            rising := TRUE;
        ELSE 
            rising := FALSE;
        END_IF;
    ELSE 
        rising := FALSE;
    END_IF;
END_IF;
IF rising THEN 
    y0 := 1;
ELSE 
    y0 := 0;
END_IF;
IF (u0 = 2) AND (y1 = 0) THEN 
    y1 := 100;
END_IF;
END_FUNCTION_BLOCK
FUNCTION_BLOCK PT1_Tustin1
VAR_INPUT
    ssMethodType: INT;
    PT1_Input: REAL;
    Gain_System: REAL;
    Time_Constant_System: REAL;
    Reset: REAL;
END_VAR
VAR_OUTPUT
    PT1_Output: REAL;
END_VAR
VAR
    Multiply: REAL;
    DiscreteTransferFcnv: REAL;
    b_DiscreteTransferFc: INT := 3;
    c_TmpSignalConversio: ARRAY [0..1] OF REAL;
    d_TmpSignalConversio: ARRAY [0..1] OF REAL;
    i0_b_ZCFCN_d_RISING: b_ZCFCN_d_RISING;
    tempOutEvent: DINT;
    rtb_Gain_p: REAL;
    rtb_Divide_b: REAL;
END_VAR
CASE ssMethodType OF
    0: 
        (* InitializeConditions for DiscreteTransferFcn: '<S108>/Discrete Transfer Fcn' *)
        DiscreteTransferFcnv := 0.0;
    3: 
        (* Gain: '<S108>/Gain' *)
        rtb_Gain_p := 2.0 * Time_Constant_System;
        (* Product: '<S108>/Multiply' *)
        Multiply := Gain_System * Gain_System;
        (* Product: '<S108>/Divide' incorporates:
         *  Sum: '<S108>/Add' *)
        rtb_Divide_b := Multiply / (Gain_System + rtb_Gain_p);
        (* SignalConversion: '<S108>/TmpSignal ConversionAtDiscrete Transfer FcnInport2' *)
        c_TmpSignalConversio[0] := rtb_Divide_b;
        c_TmpSignalConversio[1] := rtb_Divide_b;
        (* SignalConversion: '<S108>/TmpSignal ConversionAtDiscrete Transfer FcnInport3' incorporates:
         *  Constant: '<S108>/Constant'
         *  Gain: '<S108>/Gain1'
         *  Product: '<S108>/Divide1'
         *  Sum: '<S108>/Add1'
         *  Sum: '<S108>/Minus' *)
        d_TmpSignalConversio[0] := 1.0;
        d_TmpSignalConversio[1] :=  -((rtb_Gain_p - Gain_System) / (rtb_Gain_p + Gain_System));
        (* DiscreteTransferFcn: '<S108>/Discrete Transfer Fcn' *)
        i0_b_ZCFCN_d_RISING(u0 := b_DiscreteTransferFc, u1 := Reset);
        tempOutEvent := i0_b_ZCFCN_d_RISING.y0;
        b_DiscreteTransferFc := i0_b_ZCFCN_d_RISING.y1;
        IF tempOutEvent <> 0 THEN 
            DiscreteTransferFcnv := 0.0;
        END_IF;
        rtb_Gain_p := PT1_Input - (d_TmpSignalConversio[1] * DiscreteTransferFcnv);
        PT1_Output := (c_TmpSignalConversio[0] * rtb_Gain_p) + (c_TmpSignalConversio[1] * DiscreteTransferFcnv);
        (* End of DiscreteTransferFcn: '<S108>/Discrete Transfer Fcn' *)
        
        (* Update for DiscreteTransferFcn: '<S108>/Discrete Transfer Fcn' *)
        DiscreteTransferFcnv := rtb_Gain_p;
END_CASE;
END_FUNCTION_BLOCK
FUNCTION_BLOCK ZCFCN_d_RISING
VAR_INPUT
    u0: INT;
    u1: REAL;
END_VAR
VAR_OUTPUT
    y0: DINT;
    y1: INT;
END_VAR
VAR
    rising: BOOL;
    temp1: BOOL;
    temp2: BOOL;
END_VAR
temp1 := FALSE;
IF u1 > 0.0 THEN 
    y1 := 1;
ELSIF u1 < 0.0 THEN 
    y1 := 2;
ELSE 
    y1 := 0;
END_IF;
temp2 := FALSE;
IF u0 = 2 THEN 
    IF y1 = 0 THEN 
        rising := TRUE;
    ELSIF y1 = 1 THEN 
        rising := TRUE;
    ELSE 
        temp2 := TRUE;
    END_IF;
ELSE 
    temp2 := TRUE;
END_IF;
IF temp2 THEN 
    IF u0 = 0 THEN 
        IF y1 = 1 THEN 
            rising := TRUE;
        ELSE 
            temp1 := TRUE;
        END_IF;
    ELSE 
        temp1 := TRUE;
    END_IF;
END_IF;
IF temp1 THEN 
    IF u0 = 101 THEN 
        IF y1 = 1 THEN 
            rising := TRUE;
        ELSE 
            rising := FALSE;
        END_IF;
    ELSE 
        rising := FALSE;
    END_IF;
END_IF;
IF rising THEN 
    y0 := 1;
ELSE 
    y0 := 0;
END_IF;
IF (u0 = 2) AND (y1 = 0) THEN 
    y1 := 100;
END_IF;
END_FUNCTION_BLOCK
FUNCTION_BLOCK SmP_MIAC
{S7_m_c := 'true' }
VAR_INPUT
    ssMethodType {S7_m_c:='true'} : INT := 0;
    Setpoint {S7_m_c:='true'} : REAL:= 170;
    Process_Value {S7_m_c:='true'} : REAL;
    Gain_System {S7_m_c:='true'} : REAL:=0.5;
    Time_Constant_System {S7_m_c:='true'} : REAL:=700;
    Dead_Time_System {S7_m_c:='true'} : DINT:=600;
    Enable_Auto {S7_m_c:='true'} : REAL:=0;
    Hand_Value {S7_m_c:='true'} : REAL:=75;
    P_Controller {S7_m_c:='true'} : REAL:=1.8;
    I_Controller {S7_m_c:='true'} : REAL:=937;
    Start_Identification {S7_m_c:='true'} : REAL;
    InitialCovariance {S7_m_c:='true'} : REAL:=10;
    c_Time_Constant_Gain {S7_m_c:='true'} : REAL:=1200;
    c_Time_Constant_Esti {S7_m_c:='true'} : REAL:=100;
    Enable_Adaption {S7_m_c:='true'} : REAL;
    Sample_Time {S7_m_c:='true'} : REAL:=1;
END_VAR
VAR_OUTPUT
    Gain_NOT_Filtered {S7_m_c:='true'} : REAL;
    Gain_Filtered {S7_m_c:='true'} : REAL;
    Controller_Value {S7_m_c:='true'} : REAL;
END_VAR
VAR
    UnitDelay_DSTATE: REAL;
    c_Integrator_IC_LOAD: INT;
    Integrator_DSTATE: REAL;
    c_Integrator_PrevRes: INT;
    In1: REAL;
    In1_a: REAL;
    icLoad: INT;
    icLoad_f: INT;
    icLoad_m: INT;
    icLoad_n: INT;
    icLoad_d: INT;
    icLoad_o: INT;
    Multiply: REAL;
    In1_aj: REAL;
    In1_o: REAL;
    UnitDelay_DSTATE_e: REAL;
    c_arxEstimator_not_e: BOOL;
    arxEstimator: c_d_recursiveEstimat;
    DiscreteTransferFcnv: REAL;
    b_DiscreteTransferFc: REAL;
    c_System_Delay_Simul: INT := 3;
    delayTheta_Reset_ZCE: INT := 3;
    delayL_Reset_ZCE: INT := 3;
    delayPhi_Reset_ZCE: INT := 3;
    c_delayBufferU_Reset: INT := 3;
    c_delayBufferY_Reset: INT := 3;
    c_delayBufferRegress: INT := 3;
    Delay_Reset_ZCE: INT := 3;
    d_System_Delay_Simul: INT := 3;
    c_DiscreteTransferFc: INT := 3;
    d_DiscreteTransferFc: INT := 3;
    e_System_Delay_Simul: ARRAY [0..899] OF REAL;
    f_System_Delay_Simul: ARRAY [0..899] OF REAL;
    c_TmpSignalConversio: ARRAY [0..1] OF REAL;
    d_TmpSignalConversio: ARRAY [0..1] OF REAL;
    e_TmpSignalConversio: ARRAY [0..1] OF REAL;
    f_TmpSignalConversio: ARRAY [0..1] OF REAL;
    delayL_DSTATE: ARRAY [0..8] OF REAL;
    delayTheta_DSTATE: ARRAY [0..2] OF REAL;
    delayPhi_DSTATE: ARRAY [0..3] OF REAL;
    i0_ZCFCN_d_RISING: ZCFCN_d_RISING;
    i0_PT1_Tustin1: PT1_Tustin1;
    i1_PT1_Tustin1: PT1_Tustin1;
    phi: ARRAY [0..2] OF REAL;
    fTr: ARRAY [0..2] OF REAL;
    a1: REAL;
    sqrtA0overA1: REAL;
    sqrtA0timesA1: REAL;
    kk: DINT;
    rtb_UnitDelay: REAL;
    rtb_theta: ARRAY [0..2] OF REAL;
    rtb_AzSumofElements: REAL;
    c_rtb_DiscreteTransf: REAL;
    d_rtb_DiscreteTransf: REAL;
    rtb_y: ARRAY [0..8] OF REAL;
    rtb_phiMemory: ARRAY [0..3] OF REAL;
    rtb_theta_tmp: REAL;
END_VAR
CASE ssMethodType OF
    0: 
        (* InitializeConditions for UnitDelay: '<S1>/Unit Delay' *)
        UnitDelay_DSTATE := 0.0;
        (* SystemInitialize for Atomic SubSystem: '<S1>/System Identification' *)
        (* InitializeConditions for Delay: '<S3>/System_Delay_Simulation' *)
        FOR kk := 0 TO 899 DO 
            e_System_Delay_Simul[kk] := 0.0;
        END_FOR;
        (* End of InitializeConditions for Delay: '<S3>/System_Delay_Simulation' *)
        
        (* InitializeConditions for Delay: '<S110>/delayTheta' *)
        icLoad := 1;
        (* InitializeConditions for Delay: '<S110>/delayL' *)
        icLoad_f := 1;
        (* InitializeConditions for Delay: '<S110>/delayPhi' *)
        icLoad_m := 1;
        (* InitializeConditions for Delay: '<S110>/delayBufferU' *)
        icLoad_n := 1;
        (* InitializeConditions for Delay: '<S110>/delayBufferY' *)
        icLoad_d := 1;
        (* InitializeConditions for Delay: '<S130>/delayBufferRegressors' *)
        icLoad_o := 1;
        (* SystemInitialize for Enabled SubSystem: '<S3>/Get_Current_delayed_Input_Offset' *)
        (* SystemInitialize for Outport: '<S106>/Hold when disabled' *)
        In1 := 0.0;
        (* End of SystemInitialize for SubSystem: '<S3>/Get_Current_delayed_Input_Offset' *)
        (* End of SystemInitialize for SubSystem: '<S1>/System Identification' *)
        
        (* Constant: '<S3>/Constant2' *)
        i0_PT1_Tustin1(ssMethodType := 0, PT1_Input := a1, Gain_System := 1.0, Time_Constant_System := c_Time_Constant_Esti, 
            Reset := Start_Identification);
        (* SystemInitialize for Atomic SubSystem: '<S1>/System Identification' *)
        (* SystemInitialize for Enabled SubSystem: '<S3>/Get_Current_Output_Offset' *)
        (* SystemInitialize for Outport: '<S105>/Hold when disabled' *)
        In1_a := 0.0;
        (* End of SystemInitialize for SubSystem: '<S3>/Get_Current_Output_Offset' *)
        (* End of SystemInitialize for SubSystem: '<S1>/System Identification' *)
        
        (* Constant: '<S3>/Constant2' *)
        i1_PT1_Tustin1(ssMethodType := 0, PT1_Input := a1, Gain_System := 1.0, Time_Constant_System := c_Time_Constant_Esti, 
            Reset := Start_Identification);
        (* SystemInitialize for Atomic SubSystem: '<S1>/System Identification' *)
        (* SystemInitialize for MATLAB Function: '<S130>/rarx' *)
        c_arxEstimator_not_e := FALSE;
        (* SystemInitialize for Atomic SubSystem: '<S3>/PT1_Tustin' *)
        (* InitializeConditions for DiscreteTransferFcn: '<S107>/Discrete Transfer Fcn' *)
        DiscreteTransferFcnv := 0.0;
        (* End of SystemInitialize for SubSystem: '<S3>/PT1_Tustin' *)
        (* End of SystemInitialize for SubSystem: '<S1>/System Identification' *)
        
        (* SystemInitialize for Atomic SubSystem: '<S1>/Adaptive SmithPredictor1' *)
        (* InitializeConditions for UnitDelay: '<S2>/Unit Delay' *)
        UnitDelay_DSTATE_e := 0.0;
        (* InitializeConditions for DiscreteIntegrator: '<S62>/Integrator' *)
        c_Integrator_IC_LOAD := 1;
        c_Integrator_PrevRes := 2;
        (* End of SystemInitialize for SubSystem: '<S1>/Adaptive SmithPredictor1' *)
        (* SystemInitialize for Atomic SubSystem: '<S1>/Adaptive SmithPredictor1' *)
        (* InitializeConditions for Delay: '<S2>/System_Delay_Simulation' *)
        FOR kk := 0 TO 899 DO 
            f_System_Delay_Simul[kk] := 0.0;
        END_FOR;
        (* End of InitializeConditions for Delay: '<S2>/System_Delay_Simulation' *)
        
        (* SystemInitialize for Enabled SubSystem: '<S2>/Get_Current_Offset1' *)
        (* SystemInitialize for Outport: '<S5>/Hold when disabled' *)
        In1_aj := 0.0;
        (* End of SystemInitialize for SubSystem: '<S2>/Get_Current_Offset1' *)
        
        (* SystemInitialize for Enabled SubSystem: '<S2>/Get_Current_Offset' *)
        (* SystemInitialize for Outport: '<S4>/Hold when disabled' *)
        In1_o := 0.0;
        (* End of SystemInitialize for SubSystem: '<S2>/Get_Current_Offset' *)
        
        (* SystemInitialize for Atomic SubSystem: '<S2>/PT1_Tustin' *)
        (* InitializeConditions for DiscreteTransferFcn: '<S7>/Discrete Transfer Fcn' *)
        b_DiscreteTransferFc := 0.0;
        (* End of SystemInitialize for SubSystem: '<S2>/PT1_Tustin' *)
        (* End of SystemInitialize for SubSystem: '<S1>/Adaptive SmithPredictor1' *)
    1: 
        (* UnitDelay: '<S1>/Unit Delay' *)
        rtb_UnitDelay := UnitDelay_DSTATE;
        (* Outputs for Atomic SubSystem: '<S1>/System Identification' *)
        (* Delay: '<S3>/System_Delay_Simulation' incorporates:
         *  Constant: '<S3>/Vorsicht wenn resettet wird muss erst dieser Totzeitspeicher  voll gelaufen sein bevor die Adaption starten darf  Sonst kommt heir immer 0 raus und die Identifikation kann nicht rechnen' *)
        i0_ZCFCN_d_RISING(u0 := c_System_Delay_Simul, u1 := 0.0);
        kk := i0_ZCFCN_d_RISING.y0;
        c_System_Delay_Simul := i0_ZCFCN_d_RISING.y1;
        IF kk <> 0 THEN 
            FOR kk := 0 TO 899 DO 
                e_System_Delay_Simul[kk] := 0.0;
            END_FOR;
        END_IF;
        IF Dead_Time_System <= 0 THEN 
            d_rtb_DiscreteTransf := rtb_UnitDelay;
        ELSE 
            IF Dead_Time_System > 900 THEN 
                kk := 900;
            ELSE 
                kk := Dead_Time_System;
            END_IF;
            d_rtb_DiscreteTransf := e_System_Delay_Simul[900 - kk];
        END_IF;
        (* End of Delay: '<S3>/System_Delay_Simulation' *)
        
        (* Outputs for Enabled SubSystem: '<S3>/Get_Current_delayed_Input_Offset' incorporates:
         *  EnablePort: '<S106>/Enable' *)
        (* Logic: '<S3>/NOT1' incorporates:
         *  Inport: '<S106>/In1' *)
        IF Start_Identification = 0.0 THEN 
            In1 := d_rtb_DiscreteTransf;
        END_IF;
        (* End of Logic: '<S3>/NOT1' *)
        (* End of Outputs for SubSystem: '<S3>/Get_Current_delayed_Input_Offset' *)
        
        (* MATLAB Function: '<S130>/rarx' incorporates:
         *  Constant: '<S3>/Constant2'
         *  Sum: '<S3>/Substract Current Offset  so that the linearised model works1' *)
        i0_PT1_Tustin1(ssMethodType := 3, PT1_Input := d_rtb_DiscreteTransf - In1, Gain_System := 1.0, Time_Constant_System := c_Time_Constant_Esti, 
            Reset := Start_Identification);
        rtb_phiMemory[2] := i0_PT1_Tustin1.PT1_Output;
        (* Outputs for Enabled SubSystem: '<S3>/Get_Current_Output_Offset' incorporates:
         *  EnablePort: '<S105>/Enable' *)
        (* Logic: '<S3>/NOT' incorporates:
         *  Inport: '<S105>/In1' *)
        IF Start_Identification = 0.0 THEN 
            In1_a := Process_Value;
        END_IF;
        (* End of Logic: '<S3>/NOT' *)
        (* End of Outputs for SubSystem: '<S3>/Get_Current_Output_Offset' *)
        
        (* Sum: '<S3>/Substract Current Offset  so that the linearised model works' incorporates:
         *  Constant: '<S3>/Constant2' *)
        i1_PT1_Tustin1(ssMethodType := 3, PT1_Input := Process_Value - In1_a, Gain_System := 1.0, Time_Constant_System := c_Time_Constant_Esti, 
            Reset := Start_Identification);
        d_rtb_DiscreteTransf := i1_PT1_Tustin1.PT1_Output;
        (* Delay: '<S110>/delayTheta' *)
        (* idRecursiveEstimationProcessParametersRarx Helper function to construct *)
        (* the vector of free estimated parameters from the A and B polynomials. *)
        (* MATLAB Function 'Recursive Estimation/rarxProcessInitialParameters/rarxProcessInitialParameters': '<S149>:1' *)
        (* Copyright 2013-2015 The MathWorks, Inc. *)
        (* #codegen *)
        (* '<S149>:1:9' coder.extrinsic('idRecursiveEstimationProcessParametersRarx_double_mex'); *)
        (* '<S149>:1:10' coder.extrinsic('idRecursiveEstimationProcessParametersRarx_single_mex'); *)
        (* '<S149>:1:11' if coder.target('Sfun') && ~coder.target('RtwForRapid') && ~coder.target('RtwForSim') *)
        (* '<S149>:1:21' else *)
        (* Use M code for code generation *)
        (* '<S149>:1:23' theta = idRecursiveEstimationProcessParametersRarx(A,B,... *)
        (* '<S149>:1:24'         na,nb,nk,nParameters); *)
        i0_ZCFCN_d_RISING(u0 := delayTheta_Reset_ZCE, u1 := Start_Identification);
        kk := i0_ZCFCN_d_RISING.y0;
        delayTheta_Reset_ZCE := i0_ZCFCN_d_RISING.y1;
        IF kk <> 0 THEN 
            icLoad := 1;
        END_IF;
        IF icLoad <> 0 THEN 
            delayTheta_DSTATE[0] := 2.2204460492503131E-16;
            delayTheta_DSTATE[1] := 2.2204460492503131E-16;
            delayTheta_DSTATE[2] := 2.2204460492503131E-16;
        END_IF;
        (* Outputs for Atomic SubSystem: '<S110>/ProcessInitialCovariance' *)
        (* MATLAB Function: '<S133>/ScalarExpansion' *)
        (* ctrlScalarExpansion Helper function for scalar expansion. *)
        
        (* y  = ctrlScalarExpansion(u,n) *)
        (* An n-ny-n matrix y is created based on u. If u is a scalar, y has u  *)
        (* on its diagonals. If u is a vector, y has the elements of u on its *)
        (* diagonals. If u is a matrix y = (u+u.')/2.  *)
        (* When u is scalar or vector, we enforce symmetric positive-definiteness. *)
        (* When u is a matrix, we enly enforce symmetry.  *)
        (* MATLAB Function 'Utilities/ScalarExpansion/ScalarExpansion': '<S148>:1' *)
        (* Copyright 2014-2015 The MathWorks, Inc. *)
        (* '<S148>:1:16' y = ctrlScalarExpansion(u,n,IsStrictPositiveDefinite,OutputSquareRootY); *)
        a1 := InitialCovariance;
        (* End of Outputs for SubSystem: '<S110>/ProcessInitialCovariance' *)
        (* End of Outputs for SubSystem: '<S1>/System Identification' *)
        (* Outputs for Atomic SubSystem: '<S1>/System Identification' *)
        (* Outputs for Atomic SubSystem: '<S110>/ProcessInitialCovariance' *)
        (* MATLAB Function: '<S133>/ScalarExpansion' *)
        FOR kk := 0 TO 8 DO 
            rtb_y[kk] := 0.0;
        END_FOR;
        IF InitialCovariance <= 0.0 THEN 
            a1 := 2.2204460492503131E-16;
        END_IF;
        a1 := SQRT(a1);
        rtb_y[0] := a1;
        rtb_y[4] := a1;
        rtb_y[8] := a1;
        (* End of Outputs for SubSystem: '<S110>/ProcessInitialCovariance' *)
        
        (* Delay: '<S110>/delayL' *)
        i0_ZCFCN_d_RISING(u0 := delayL_Reset_ZCE, u1 := Start_Identification);
        kk := i0_ZCFCN_d_RISING.y0;
        delayL_Reset_ZCE := i0_ZCFCN_d_RISING.y1;
        IF kk <> 0 THEN 
            icLoad_f := 1;
        END_IF;
        IF icLoad_f <> 0 THEN 
            FOR kk := 0 TO 8 DO 
                delayL_DSTATE[kk] := rtb_y[kk];
            END_FOR;
        END_IF;
        (* Delay: '<S110>/delayPhi' *)
        i0_ZCFCN_d_RISING(u0 := delayPhi_Reset_ZCE, u1 := Start_Identification);
        kk := i0_ZCFCN_d_RISING.y0;
        delayPhi_Reset_ZCE := i0_ZCFCN_d_RISING.y1;
        IF kk <> 0 THEN 
            icLoad_m := 1;
        END_IF;
        IF icLoad_m <> 0 THEN 
            delayPhi_DSTATE[0] := 0.0;
            delayPhi_DSTATE[1] := 0.0;
            delayPhi_DSTATE[2] := 0.0;
            delayPhi_DSTATE[3] := 0.0;
        END_IF;
        (* Delay: '<S110>/delayBufferU' *)
        i0_ZCFCN_d_RISING(u0 := c_delayBufferU_Reset, u1 := Start_Identification);
        kk := i0_ZCFCN_d_RISING.y0;
        c_delayBufferU_Reset := i0_ZCFCN_d_RISING.y1;
        IF kk <> 0 THEN 
            icLoad_n := 1;
        END_IF;
        (* End of Delay: '<S110>/delayBufferU' *)
        
        (* Delay: '<S110>/delayBufferY' *)
        i0_ZCFCN_d_RISING(u0 := c_delayBufferY_Reset, u1 := Start_Identification);
        kk := i0_ZCFCN_d_RISING.y0;
        c_delayBufferY_Reset := i0_ZCFCN_d_RISING.y1;
        IF kk <> 0 THEN 
            icLoad_d := 1;
        END_IF;
        (* End of Delay: '<S110>/delayBufferY' *)
        
        (* Delay: '<S130>/delayBufferRegressors' *)
        (* MATLAB Function 'Recursive Estimation/InitializeRegressorsFromSignalsARX/CalculateInitialRegressors': '<S146>:1' *)
        (* '<S146>:1:3' if algorithmParams.windowLength==0 *)
        (* Infinite-history estimator *)
        
        (* H0 is unused *)
        (* '<S146>:1:7' H0 = cast(0,'like',yMemory); *)
        i0_ZCFCN_d_RISING(u0 := c_delayBufferRegress, u1 := Start_Identification);
        kk := i0_ZCFCN_d_RISING.y0;
        c_delayBufferRegress := i0_ZCFCN_d_RISING.y1;
        IF kk <> 0 THEN 
            icLoad_o := 1;
        END_IF;
        (* End of Delay: '<S130>/delayBufferRegressors' *)
        
        (* Delay: '<S132>/Delay' *)
        i0_ZCFCN_d_RISING(u0 := Delay_Reset_ZCE, u1 := Start_Identification);
        kk := i0_ZCFCN_d_RISING.y0;
        Delay_Reset_ZCE := i0_ZCFCN_d_RISING.y1;
        (* MATLAB Function: '<S130>/rarx' *)
        (* % Was a reset trigered? *)
        (* MATLAB Function 'Recursive Estimation/rarx/rarx': '<S145>:1' *)
        (* Copyright 2015-2018 The MathWorks, Inc. *)
        (* Get the estimator object. Use the arx estimator with nb=0 *)
        (* '<S145>:1:17' if isempty(arxEstimator) *)
        IF  NOT c_arxEstimator_not_e THEN 
            (* '<S145>:1:18' arxEstimator = recursiveEstimation.internal.rpoly.getEstimator(... *)
            (* '<S145>:1:19'         'arx',... *)
            (* '<S145>:1:20'         algorithmParams); *)
            c_arxEstimator_not_e := TRUE;
        END_IF;
        (* If user triggered a reset, communicate this to the estimator *)
        (* '<S145>:1:24' if hasTriggeredReset *)
        (* Update algorithm states, perform estimation *)
        (* % States *)
        (* % new IO data *)
        (* '<S145>:1:31' [phiMemory, uMemory, yMemory, regressorsMemory, ... *)
        (* '<S145>:1:32'     theta, L, ... *)
        (* '<S145>:1:33'     A, B, e] = ... *)
        (* '<S145>:1:34'     arxEstimator.estimate(... *)
        (* '<S145>:1:35'     phiMemory, uMemory, yMemory, regressorsMemory, theta, L, ... % States *)
        (* '<S145>:1:36'     yMeas, uMeas,... % new IO data *)
        (* '<S145>:1:37'     isEnabled, adg1, adg2, algorithmParams); *)
        arxEstimator.OutputDataIterator.IteratorPosition := 1;
        arxEstimator.InputDataIterator.IteratorPosition := 1;
        arxEstimator.OutputDataIterator.IteratorPosition := MIN(IN1:=arxEstimator.OutputDataIterator.IteratorPosition + 1, 
            IN2:=2);
        arxEstimator.InputDataIterator.IteratorPosition := MIN(IN1:=arxEstimator.InputDataIterator.IteratorPosition + 1, 
            IN2:=2);
        (* End of Outputs for SubSystem: '<S1>/System Identification' *)
        (* Outputs for Atomic SubSystem: '<S1>/System Identification' *)
        (* MATLAB Function: '<S130>/rarx' incorporates:
         *  DataTypeConversion: '<S110>/DataTypeConversionEnable'
         *  Delay: '<S110>/delayL'
         *  Delay: '<S110>/delayPhi'
         *  Delay: '<S110>/delayTheta' *)
        FOR kk := 0 TO 8 DO 
            rtb_y[kk] := delayL_DSTATE[kk];
        END_FOR;
        rtb_theta[0] := delayTheta_DSTATE[0];
        rtb_theta[1] := delayTheta_DSTATE[1];
        rtb_theta[2] := delayTheta_DSTATE[2];
        c_rtb_DiscreteTransf := d_rtb_DiscreteTransf - (((delayPhi_DSTATE[0] * delayTheta_DSTATE[0]) + (delayPhi_DSTATE[1] * delayTheta_DSTATE[1])
            ) + (delayPhi_DSTATE[3] * delayTheta_DSTATE[2]));
        IF Start_Identification <> 0.0 THEN 
            FOR kk := 0 TO 2 DO 
                fTr[kk] := (delayL_DSTATE[(3 * kk) + 2] * delayPhi_DSTATE[3]) + ((delayL_DSTATE[(3 * kk) + 1] * delayPhi_DSTATE[1])
                     + (delayL_DSTATE[3 * kk] * delayPhi_DSTATE[0]));
            END_FOR;
            phi[0] := 0.0;
            rtb_theta[0] := 0.0;
            phi[1] := 0.0;
            rtb_theta[1] := 0.0;
            a1 := (fTr[2] * fTr[2]) + 1.0;
            sqrtA0overA1 := SQRT(1.0 / a1);
            rtb_theta[2] := rtb_y[8] * fTr[2];
            rtb_y[8] := (rtb_y[8] * sqrtA0overA1) - (0.0 / (sqrtA0overA1 * a1));
            phi[2] := rtb_theta[2];
            sqrtA0overA1 := a1;
            a1 := (fTr[1] * fTr[1]) + a1;
            sqrtA0overA1 := SQRT(sqrtA0overA1 / a1);
            sqrtA0timesA1 := sqrtA0overA1 * a1;
            FOR kk := 0 TO 1 DO 
                rtb_AzSumofElements := rtb_y[5 - kk];
                rtb_theta_tmp := phi[2 - kk];
                rtb_theta[2 - kk] := (rtb_AzSumofElements * fTr[1]) + rtb_theta_tmp;
                rtb_y[5 - kk] := (rtb_AzSumofElements * sqrtA0overA1) - ((rtb_theta_tmp * fTr[1]) / sqrtA0timesA1);
                phi[2 - kk] := rtb_theta[2 - kk];
            END_FOR;
            sqrtA0overA1 := a1;
            a1 := (fTr[0] * fTr[0]) + a1;
            sqrtA0overA1 := SQRT(sqrtA0overA1 / a1);
            sqrtA0timesA1 := sqrtA0overA1 * a1;
            FOR kk := 0 TO 2 DO 
                rtb_AzSumofElements := rtb_y[2 - kk];
                rtb_theta_tmp := phi[2 - kk];
                rtb_theta[2 - kk] := (rtb_AzSumofElements * fTr[0]) + rtb_theta_tmp;
                rtb_y[2 - kk] := (rtb_AzSumofElements * sqrtA0overA1) - ((rtb_theta_tmp * fTr[0]) / sqrtA0timesA1);
                phi[2 - kk] := rtb_theta[2 - kk];
            END_FOR;
            rtb_theta[0] := rtb_theta[0] / a1;
            rtb_theta[1] := rtb_theta[1] / a1;
            rtb_theta[0] := (rtb_theta[0] * c_rtb_DiscreteTransf) + delayTheta_DSTATE[0];
            rtb_theta[1] := (rtb_theta[1] * c_rtb_DiscreteTransf) + delayTheta_DSTATE[1];
            rtb_theta[2] := ((rtb_theta[2] / a1) * c_rtb_DiscreteTransf) + delayTheta_DSTATE[2];
        END_IF;
        rtb_phiMemory[3] := rtb_phiMemory[2];
        rtb_phiMemory[2] := delayPhi_DSTATE[1];
        rtb_phiMemory[1] := delayPhi_DSTATE[0];
        rtb_phiMemory[0] :=  -d_rtb_DiscreteTransf;
        (* Outputs for Atomic SubSystem: '<S3>/Calculate DC Gain1' *)
        (* Product: '<S104>/Divide' incorporates:
         *  MATLAB Function: '<S130>/rarx'
         *  Sum: '<S104>/A(z) Sum of Elements' *)
        (* helper variables *)
        d_rtb_DiscreteTransf := rtb_theta[2] / ((1.0 + rtb_theta[0]) + rtb_theta[1]);
        (* Saturate: '<S104>/Gain_Saturation' *)
        IF d_rtb_DiscreteTransf >= 1.5 THEN 
            Gain_NOT_Filtered := 1.5;
        ELSIF d_rtb_DiscreteTransf > 0.01 THEN 
            Gain_NOT_Filtered := d_rtb_DiscreteTransf;
        ELSE 
            Gain_NOT_Filtered := 0.01;
        END_IF;
        (* End of Saturate: '<S104>/Gain_Saturation' *)
        (* End of Outputs for SubSystem: '<S3>/Calculate DC Gain1' *)
        
        (* Outputs for Atomic SubSystem: '<S3>/PT1_Tustin' *)
        (* Gain: '<S107>/Gain' *)
        sqrtA0overA1 := 2.0 * c_Time_Constant_Gain;
        (* Product: '<S107>/Multiply' incorporates:
         *  Constant: '<S3>/Constant' *)
        Multiply := 1.0;
        (* Product: '<S107>/Divide' incorporates:
         *  Constant: '<S3>/Constant'
         *  Sum: '<S107>/Add' *)
        d_rtb_DiscreteTransf := Multiply / (1.0 + sqrtA0overA1);
        (* SignalConversion: '<S107>/TmpSignal ConversionAtDiscrete Transfer FcnInport2' *)
        c_TmpSignalConversio[0] := d_rtb_DiscreteTransf;
        c_TmpSignalConversio[1] := d_rtb_DiscreteTransf;
        (* SignalConversion: '<S107>/TmpSignal ConversionAtDiscrete Transfer FcnInport3' incorporates:
         *  Constant: '<S107>/Constant'
         *  Constant: '<S3>/Constant'
         *  Gain: '<S107>/Gain1'
         *  Product: '<S107>/Divide1'
         *  Sum: '<S107>/Add1'
         *  Sum: '<S107>/Minus' *)
        d_TmpSignalConversio[0] := 1.0;
        d_TmpSignalConversio[1] :=  -((sqrtA0overA1 - 1.0) / (sqrtA0overA1 + 1.0));
        (* DiscreteTransferFcn: '<S107>/Discrete Transfer Fcn' *)
        i0_ZCFCN_d_RISING(u0 := c_DiscreteTransferFc, u1 := Start_Identification);
        kk := i0_ZCFCN_d_RISING.y0;
        c_DiscreteTransferFc := i0_ZCFCN_d_RISING.y1;
        IF kk <> 0 THEN 
            DiscreteTransferFcnv := 0.0;
        END_IF;
        d_rtb_DiscreteTransf := Gain_NOT_Filtered - (d_TmpSignalConversio[1] * DiscreteTransferFcnv);
        sqrtA0timesA1 := (c_TmpSignalConversio[0] * d_rtb_DiscreteTransf) + (c_TmpSignalConversio[1] * DiscreteTransferFcnv)
            ;
        (* End of DiscreteTransferFcn: '<S107>/Discrete Transfer Fcn' *)
        
        (* Update for DiscreteTransferFcn: '<S107>/Discrete Transfer Fcn' *)
        DiscreteTransferFcnv := d_rtb_DiscreteTransf;
        (* End of Outputs for SubSystem: '<S3>/PT1_Tustin' *)
        
        (* Update for Delay: '<S3>/System_Delay_Simulation' *)
        FOR kk := 0 TO 898 DO 
            e_System_Delay_Simul[kk] := e_System_Delay_Simul[kk + 1];
        END_FOR;
        e_System_Delay_Simul[899] := rtb_UnitDelay;
        (* End of Update for Delay: '<S3>/System_Delay_Simulation' *)
        
        (* Update for Delay: '<S110>/delayTheta' *)
        icLoad := 0;
        delayTheta_DSTATE[0] := rtb_theta[0];
        delayTheta_DSTATE[1] := rtb_theta[1];
        delayTheta_DSTATE[2] := rtb_theta[2];
        (* Update for Delay: '<S110>/delayL' *)
        icLoad_f := 0;
        (* End of Outputs for SubSystem: '<S1>/System Identification' *)
        (* Outputs for Atomic SubSystem: '<S1>/System Identification' *)
        (* Update for Delay: '<S110>/delayL' *)
        FOR kk := 0 TO 8 DO 
            delayL_DSTATE[kk] := rtb_y[kk];
        END_FOR;
        (* Update for Delay: '<S110>/delayPhi' *)
        icLoad_m := 0;
        delayPhi_DSTATE[0] := rtb_phiMemory[0];
        delayPhi_DSTATE[1] := rtb_phiMemory[1];
        delayPhi_DSTATE[2] := rtb_phiMemory[2];
        delayPhi_DSTATE[3] := rtb_phiMemory[3];
        (* Update for Delay: '<S110>/delayBufferU' *)
        icLoad_n := 0;
        (* Update for Delay: '<S110>/delayBufferY' *)
        icLoad_d := 0;
        (* Update for Delay: '<S130>/delayBufferRegressors' *)
        icLoad_o := 0;
        (* End of Outputs for SubSystem: '<S1>/System Identification' *)
        
        (* Outport: '<Root>/Gain_Filtered' *)
        Gain_Filtered := sqrtA0timesA1;
        (* Outputs for Atomic SubSystem: '<S1>/Adaptive SmithPredictor1' *)
        (* Switch: '<S2>/Check if Controller  Integrator is 0' incorporates:
         *  Constant: '<S2>/Constant'
         *  Constant: '<S2>/Constant6'
         *  Product: '<S2>/Invert Integrator' *)
        IF I_Controller <> 0.0 THEN 
            d_rtb_DiscreteTransf := 1.0 / I_Controller;
        ELSE 
            d_rtb_DiscreteTransf := 0.0;
        END_IF;
        (* End of Switch: '<S2>/Check if Controller  Integrator is 0' *)
        
        (* Product: '<S2>/Divide' *)
        rtb_AzSumofElements := Hand_Value / P_Controller;
        (* Switch: '<S2>/Hand_Mode2' incorporates:
         *  Constant: '<S2>/Constant2' *)
        IF Enable_Auto > 0.0 THEN 
            sqrtA0overA1 := Setpoint;
        ELSE 
            sqrtA0overA1 := 0.0;
        END_IF;
        (* End of Switch: '<S2>/Hand_Mode2' *)
        
        (* Outputs for Enabled SubSystem: '<S2>/Get_Current_Offset1' incorporates:
         *  EnablePort: '<S5>/Enable' *)
        (* Logic: '<S2>/NOT1' incorporates:
         *  Inport: '<S5>/In1' *)
        IF Enable_Auto = 0.0 THEN 
            In1_aj := Process_Value;
        END_IF;
        (* End of Logic: '<S2>/NOT1' *)
        (* End of Outputs for SubSystem: '<S2>/Get_Current_Offset1' *)
        
        (* Switch: '<S2>/Hand_Mode4' incorporates:
         *  Constant: '<S2>/Constant5' *)
        IF Enable_Auto > 0.0 THEN 
            rtb_UnitDelay := In1_aj;
        ELSE 
            rtb_UnitDelay := 0.0;
        END_IF;
        (* End of Switch: '<S2>/Hand_Mode4' *)
        
        (* Sum: '<S2>/Sum' incorporates:
         *  Sum: '<S2>/Substract Current Setpoint Offset'
         *  UnitDelay: '<S2>/Unit Delay' *)
        sqrtA0overA1 := (sqrtA0overA1 - rtb_UnitDelay) - UnitDelay_DSTATE_e;
        (* DiscreteIntegrator: '<S62>/Integrator' *)
        IF c_Integrator_IC_LOAD <> 0 THEN 
            Integrator_DSTATE := rtb_AzSumofElements;
        END_IF;
        IF (Enable_Auto > 0.0) AND (c_Integrator_PrevRes <= 0) THEN 
            Integrator_DSTATE := rtb_AzSumofElements;
        END_IF;
        (* Product: '<S53>/PProd Out' incorporates:
         *  DiscreteIntegrator: '<S62>/Integrator'
         *  Sum: '<S91>/Sum' *)
        a1 := (sqrtA0overA1 + Integrator_DSTATE) * P_Controller;
        (* Saturate: '<S83>/Saturation' *)
        IF a1 >= 100.0 THEN 
            a1 := 100.0;
        ELSIF a1 <= 0.0 THEN 
            a1 := 0.0;
        END_IF;
        (* End of Saturate: '<S83>/Saturation' *)
        
        (* Switch: '<S2>/Hand_Mode' *)
        IF Enable_Auto > 0.0 THEN 
            Controller_Value := a1;
        ELSE 
            Controller_Value := Hand_Value;
        END_IF;
        (* End of Switch: '<S2>/Hand_Mode' *)
        
        (* Outputs for Enabled SubSystem: '<S2>/Get_Current_Offset' incorporates:
         *  EnablePort: '<S4>/Enable' *)
        (* Logic: '<S2>/NOT' incorporates:
         *  Inport: '<S4>/In1' *)
        IF Enable_Auto = 0.0 THEN 
            In1_o := Controller_Value;
        END_IF;
        (* End of Logic: '<S2>/NOT' *)
        (* End of Outputs for SubSystem: '<S2>/Get_Current_Offset' *)
        
        (* Switch: '<S2>/Hand_Mode1' incorporates:
         *  Constant: '<S2>/Constant3'
         *  Constant: '<S2>/Constant4'
         *  Sum: '<S2>/Substract Current Offset  so that the linearised model works'
         *  Switch: '<S2>/Hand_Mode3' *)
        IF Enable_Auto > 0.0 THEN 
            a1 := Controller_Value - In1_o;
            rtb_AzSumofElements := Process_Value;
        ELSE 
            a1 := 0.0;
            rtb_AzSumofElements := 0.0;
        END_IF;
        (* End of Switch: '<S2>/Hand_Mode1' *)
        
        (* Switch: '<S2>/Switch_from_initial_Gain_to_Estimated' *)
        IF Enable_Adaption <= 0.0 THEN 
            sqrtA0timesA1 := Gain_System;
        END_IF;
        (* End of Switch: '<S2>/Switch_from_initial_Gain_to_Estimated' *)
        
        (* Product: '<S2>/Mul_Gain_or_Estimate' *)
        c_rtb_DiscreteTransf := a1 * sqrtA0timesA1;
        (* Outputs for Atomic SubSystem: '<S2>/PT1_Tustin' *)
        (* Gain: '<S7>/Gain' *)
        sqrtA0timesA1 := 2.0 * Time_Constant_System;
        (* Product: '<S7>/Divide' incorporates:
         *  Product: '<S7>/Multiply'
         *  Sum: '<S7>/Add' *)
        a1 := Sample_Time / (Sample_Time + sqrtA0timesA1);
        (* SignalConversion: '<S7>/TmpSignal ConversionAtDiscrete Transfer FcnInport2' *)
        e_TmpSignalConversio[0] := a1;
        e_TmpSignalConversio[1] := a1;
        (* SignalConversion: '<S7>/TmpSignal ConversionAtDiscrete Transfer FcnInport3' incorporates:
         *  Constant: '<S7>/Constant'
         *  Gain: '<S7>/Gain1'
         *  Product: '<S7>/Divide1'
         *  Sum: '<S7>/Add1'
         *  Sum: '<S7>/Minus' *)
        f_TmpSignalConversio[0] := 1.0;
        f_TmpSignalConversio[1] :=  -((sqrtA0timesA1 - Sample_Time) / (sqrtA0timesA1 + Sample_Time));
        (* DiscreteTransferFcn: '<S7>/Discrete Transfer Fcn' *)
        i0_ZCFCN_d_RISING(u0 := d_DiscreteTransferFc, u1 := Enable_Auto);
        kk := i0_ZCFCN_d_RISING.y0;
        d_DiscreteTransferFc := i0_ZCFCN_d_RISING.y1;
        IF kk <> 0 THEN 
            b_DiscreteTransferFc := 0.0;
        END_IF;
        sqrtA0timesA1 := c_rtb_DiscreteTransf - (f_TmpSignalConversio[1] * b_DiscreteTransferFc);
        a1 := (e_TmpSignalConversio[0] * sqrtA0timesA1) + (e_TmpSignalConversio[1] * b_DiscreteTransferFc);
        (* End of DiscreteTransferFcn: '<S7>/Discrete Transfer Fcn' *)
        
        (* Update for DiscreteTransferFcn: '<S7>/Discrete Transfer Fcn' *)
        b_DiscreteTransferFc := sqrtA0timesA1;
        (* End of Outputs for SubSystem: '<S2>/PT1_Tustin' *)
        
        (* Delay: '<S2>/System_Delay_Simulation' *)
        i0_ZCFCN_d_RISING(u0 := d_System_Delay_Simul, u1 := Enable_Auto);
        kk := i0_ZCFCN_d_RISING.y0;
        d_System_Delay_Simul := i0_ZCFCN_d_RISING.y1;
        IF kk <> 0 THEN 
            FOR kk := 0 TO 899 DO 
                f_System_Delay_Simul[kk] := 0.0;
            END_FOR;
        END_IF;
        IF Dead_Time_System <= 0 THEN 
            sqrtA0timesA1 := a1;
        ELSE 
            IF Dead_Time_System > 900 THEN 
                kk := 900;
            ELSE 
                kk := Dead_Time_System;
            END_IF;
            sqrtA0timesA1 := f_System_Delay_Simul[900 - kk];
        END_IF;
        (* End of Delay: '<S2>/System_Delay_Simulation' *)
        
        (* Update for UnitDelay: '<S2>/Unit Delay' incorporates:
         *  Sum: '<S2>/Substract Current Offset  so that the linearised model works1'
         *  Sum: '<S2>/Sum17'
         *  Sum: '<S2>/Sum18' *)
        UnitDelay_DSTATE_e := ((rtb_AzSumofElements - rtb_UnitDelay) - sqrtA0timesA1) + a1;
        (* Update for DiscreteIntegrator: '<S62>/Integrator' incorporates:
         *  Product: '<S51>/IProd Out' *)
        c_Integrator_IC_LOAD := 0;
        Integrator_DSTATE := (sqrtA0overA1 * d_rtb_DiscreteTransf) + Integrator_DSTATE;
        IF Enable_Auto > 0.0 THEN 
            c_Integrator_PrevRes := 1;
        ELSIF Enable_Auto < 0.0 THEN 
            c_Integrator_PrevRes := -1;
        ELSIF Enable_Auto = 0.0 THEN 
            c_Integrator_PrevRes := 0;
        ELSE 
            c_Integrator_PrevRes := 2;
        END_IF;
        (* End of Update for DiscreteIntegrator: '<S62>/Integrator' *)
        
        (* Update for Delay: '<S2>/System_Delay_Simulation' *)
        FOR kk := 0 TO 898 DO 
            f_System_Delay_Simul[kk] := f_System_Delay_Simul[kk + 1];
        END_FOR;
        f_System_Delay_Simul[899] := a1;
        (* End of Update for Delay: '<S2>/System_Delay_Simulation' *)
        (* End of Outputs for SubSystem: '<S1>/Adaptive SmithPredictor1' *)
        
        (* Update for UnitDelay: '<S1>/Unit Delay' *)
        UnitDelay_DSTATE := Controller_Value;
END_CASE;
END_FUNCTION_BLOCK
