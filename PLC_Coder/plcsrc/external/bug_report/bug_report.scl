(*
 *
 * File: bug_report.scl
 *
 * IEC 61131-3 Structured Text (ST) code generated for subsystem "bug_report/PLC Code Generation not working with Siemens but is working with CoDeSys "
 *
 * Model name                      : bug_report
 * Model version                   : 1.3
 * Model creator                   : Trips
 * Model last modified by          : Trips
 * Model last modified on          : Fri Mar 01 16:06:43 2019
 * Model sample time               : 1s
 * Subsystem name                  : bug_report/PLC Code Generation not working with Siemens but is working with CoDeSys 
 * Subsystem sample time           : 1s
 * Simulink PLC Coder version      : 2.6 (R2018b) 24-May-2018
 * ST code generated on            : Fri Mar 15 23:00:27 2019
 *
 * Target IDE selection            : Siemens SIMATIC Step 7
 * Test Bench included             : No
 *
 *)
TYPE c_c_recursiveEstimat
    STRUCT
        IteratorPosition: DINT;
    END_STRUCT
END_TYPE
TYPE c_d_recursiveEstimat
    STRUCT
        OutputDataIterator: c_c_recursiveEstimat;
        InputDataIterator: c_c_recursiveEstimat;
    END_STRUCT
END_TYPE
FUNCTION_BLOCK ZCFCN_d_RISING
VAR_INPUT
    u0: INT;
    u1: REAL;
END_VAR
VAR_OUTPUT
    y0: DINT;
    y1: INT;
END_VAR
VAR
    rising: BOOL;
    temp1: BOOL;
    temp2: BOOL;
END_VAR
temp1 := FALSE;
IF u1 > 0.0 THEN 
    y1 := 1;
ELSIF u1 < 0.0 THEN 
    y1 := 2;
ELSE 
    y1 := 0;
END_IF;
temp2 := FALSE;
IF u0 = 2 THEN 
    IF y1 = 0 THEN 
        rising := TRUE;
    ELSIF y1 = 1 THEN 
        rising := TRUE;
    ELSE 
        temp2 := TRUE;
    END_IF;
ELSE 
    temp2 := TRUE;
END_IF;
IF temp2 THEN 
    IF u0 = 0 THEN 
        IF y1 = 1 THEN 
            rising := TRUE;
        ELSE 
            temp1 := TRUE;
        END_IF;
    ELSE 
        temp1 := TRUE;
    END_IF;
END_IF;
IF temp1 THEN 
    IF u0 = 101 THEN 
        IF y1 = 1 THEN 
            rising := TRUE;
        ELSE 
            rising := FALSE;
        END_IF;
    ELSE 
        rising := FALSE;
    END_IF;
END_IF;
IF rising THEN 
    y0 := 1;
ELSE 
    y0 := 0;
END_IF;
IF (u0 = 2) AND (y1 = 0) THEN 
    y1 := 100;
END_IF;
END_FUNCTION_BLOCK
FUNCTION_BLOCK PLC
VAR_INPUT
    ssMethodType: INT;
    Input: REAL;
    Input1: REAL;
    Input2: REAL;
    Input3: REAL;
    Input4: REAL;
END_VAR
VAR_OUTPUT
    Gain_Not_Filtered: REAL;
END_VAR
VAR
    icLoad: INT;
    icLoad_b: INT;
    icLoad_m: INT;
    icLoad_n: INT;
    icLoad_k: INT;
    icLoad_e: INT;
    c_arxEstimator_not_e: BOOL;
    arxEstimator: c_d_recursiveEstimat;
    delayTheta_Reset_ZCE: INT := 3;
    delayL_Reset_ZCE: INT := 3;
    delayPhi_Reset_ZCE: INT := 3;
    c_delayBufferU_Reset: INT := 3;
    c_delayBufferY_Reset: INT := 3;
    c_delayBufferRegress: INT := 3;
    Delay_Reset_ZCE: INT := 3;
    delayL_DSTATE: ARRAY [0..8] OF REAL;
    delayTheta_DSTATE: ARRAY [0..2] OF REAL;
    delayPhi_DSTATE: ARRAY [0..3] OF REAL;
    i0_ZCFCN_d_RISING: ZCFCN_d_RISING;
    phi: ARRAY [0..2] OF REAL;
    fTr: ARRAY [0..2] OF REAL;
    a1: REAL;
    sqrtA0overA1: REAL;
    sqrtA0timesA1: REAL;
    u: REAL;
    kk: DINT;
    rtb_theta: ARRAY [0..2] OF REAL;
    rtb_y: ARRAY [0..8] OF REAL;
    rtb_phiMemory: ARRAY [0..3] OF REAL;
    rtb_theta_tmp: REAL;
    rtb_theta_tmp_0: REAL;
END_VAR
CASE ssMethodType OF
    0: 
        (* InitializeConditions for Delay: '<S3>/delayTheta' *)
        icLoad := 1;
        (* InitializeConditions for Delay: '<S3>/delayL' *)
        icLoad_b := 1;
        (* InitializeConditions for Delay: '<S3>/delayPhi' *)
        icLoad_m := 1;
        (* InitializeConditions for Delay: '<S3>/delayBufferU' *)
        icLoad_n := 1;
        (* InitializeConditions for Delay: '<S3>/delayBufferY' *)
        icLoad_k := 1;
        (* InitializeConditions for Delay: '<S23>/delayBufferRegressors' *)
        icLoad_e := 1;
        (* SystemInitialize for MATLAB Function: '<S23>/rarx' *)
        c_arxEstimator_not_e := FALSE;
    1: 
        (* Delay: '<S3>/delayTheta' *)
        (* idRecursiveEstimationProcessParametersRarx Helper function to construct *)
        (* the vector of free estimated parameters from the A and B polynomials. *)
        (* MATLAB Function 'Recursive Estimation/rarxProcessInitialParameters/rarxProcessInitialParameters': '<S42>:1' *)
        (* Copyright 2013-2015 The MathWorks, Inc. *)
        (* #codegen *)
        (* '<S42>:1:9' coder.extrinsic('idRecursiveEstimationProcessParametersRarx_double_mex'); *)
        (* '<S42>:1:10' coder.extrinsic('idRecursiveEstimationProcessParametersRarx_single_mex'); *)
        (* '<S42>:1:11' if coder.target('Sfun') && ~coder.target('RtwForRapid') && ~coder.target('RtwForSim') *)
        (* '<S42>:1:21' else *)
        (* Use M code for code generation *)
        (* '<S42>:1:23' theta = idRecursiveEstimationProcessParametersRarx(A,B,... *)
        (* '<S42>:1:24'         na,nb,nk,nParameters); *)
        i0_ZCFCN_d_RISING(u0 := delayTheta_Reset_ZCE, u1 := Input3);
        kk := i0_ZCFCN_d_RISING.y0;
        delayTheta_Reset_ZCE := i0_ZCFCN_d_RISING.y1;
        IF kk <> 0 THEN 
            icLoad := 1;
        END_IF;
        IF icLoad <> 0 THEN 
            delayTheta_DSTATE[0] := 2.2204460492503131E-16;
            delayTheta_DSTATE[1] := 2.2204460492503131E-16;
            delayTheta_DSTATE[2] := 2.2204460492503131E-16;
        END_IF;
        (* Outputs for Atomic SubSystem: '<S3>/ProcessInitialCovariance' *)
        (* MATLAB Function: '<S26>/ScalarExpansion' *)
        (* ctrlScalarExpansion Helper function for scalar expansion. *)
        
        (* y  = ctrlScalarExpansion(u,n) *)
        (* An n-ny-n matrix y is created based on u. If u is a scalar, y has u  *)
        (* on its diagonals. If u is a vector, y has the elements of u on its *)
        (* diagonals. If u is a matrix y = (u+u.')/2.  *)
        (* When u is scalar or vector, we enforce symmetric positive-definiteness. *)
        (* When u is a matrix, we enly enforce symmetry.  *)
        (* MATLAB Function 'Utilities/ScalarExpansion/ScalarExpansion': '<S41>:1' *)
        (* Copyright 2014-2015 The MathWorks, Inc. *)
        (* '<S41>:1:16' y = ctrlScalarExpansion(u,n,IsStrictPositiveDefinite,OutputSquareRootY); *)
        u := Input4;
        (* End of Outputs for SubSystem: '<S3>/ProcessInitialCovariance' *)
        (* Outputs for Atomic SubSystem: '<S3>/ProcessInitialCovariance' *)
        (* MATLAB Function: '<S26>/ScalarExpansion' *)
        FOR kk := 0 TO 8 DO 
            rtb_y[kk] := 0.0;
        END_FOR;
        IF Input4 <= 0.0 THEN 
            u := 2.2204460492503131E-16;
        END_IF;
        u := SQRT(u);
        rtb_y[0] := u;
        rtb_y[4] := u;
        rtb_y[8] := u;
        (* End of Outputs for SubSystem: '<S3>/ProcessInitialCovariance' *)
        
        (* Delay: '<S3>/delayL' *)
        i0_ZCFCN_d_RISING(u0 := delayL_Reset_ZCE, u1 := Input3);
        kk := i0_ZCFCN_d_RISING.y0;
        delayL_Reset_ZCE := i0_ZCFCN_d_RISING.y1;
        IF kk <> 0 THEN 
            icLoad_b := 1;
        END_IF;
        IF icLoad_b <> 0 THEN 
            FOR kk := 0 TO 8 DO 
                delayL_DSTATE[kk] := rtb_y[kk];
            END_FOR;
        END_IF;
        (* Delay: '<S3>/delayPhi' *)
        i0_ZCFCN_d_RISING(u0 := delayPhi_Reset_ZCE, u1 := Input3);
        kk := i0_ZCFCN_d_RISING.y0;
        delayPhi_Reset_ZCE := i0_ZCFCN_d_RISING.y1;
        IF kk <> 0 THEN 
            icLoad_m := 1;
        END_IF;
        IF icLoad_m <> 0 THEN 
            delayPhi_DSTATE[0] := 0.0;
            delayPhi_DSTATE[1] := 0.0;
            delayPhi_DSTATE[2] := 0.0;
            delayPhi_DSTATE[3] := 0.0;
        END_IF;
        (* Delay: '<S3>/delayBufferU' *)
        i0_ZCFCN_d_RISING(u0 := c_delayBufferU_Reset, u1 := Input3);
        kk := i0_ZCFCN_d_RISING.y0;
        c_delayBufferU_Reset := i0_ZCFCN_d_RISING.y1;
        IF kk <> 0 THEN 
            icLoad_n := 1;
        END_IF;
        (* End of Delay: '<S3>/delayBufferU' *)
        
        (* Delay: '<S3>/delayBufferY' *)
        i0_ZCFCN_d_RISING(u0 := c_delayBufferY_Reset, u1 := Input3);
        kk := i0_ZCFCN_d_RISING.y0;
        c_delayBufferY_Reset := i0_ZCFCN_d_RISING.y1;
        IF kk <> 0 THEN 
            icLoad_k := 1;
        END_IF;
        (* End of Delay: '<S3>/delayBufferY' *)
        
        (* Delay: '<S23>/delayBufferRegressors' *)
        (* MATLAB Function 'Recursive Estimation/InitializeRegressorsFromSignalsARX/CalculateInitialRegressors': '<S39>:1' *)
        (* '<S39>:1:3' if algorithmParams.windowLength==0 *)
        (* Infinite-history estimator *)
        
        (* H0 is unused *)
        (* '<S39>:1:7' H0 = cast(0,'like',yMemory); *)
        i0_ZCFCN_d_RISING(u0 := c_delayBufferRegress, u1 := Input3);
        kk := i0_ZCFCN_d_RISING.y0;
        c_delayBufferRegress := i0_ZCFCN_d_RISING.y1;
        IF kk <> 0 THEN 
            icLoad_e := 1;
        END_IF;
        (* End of Delay: '<S23>/delayBufferRegressors' *)
        
        (* Delay: '<S25>/Delay' *)
        i0_ZCFCN_d_RISING(u0 := Delay_Reset_ZCE, u1 := Input3);
        kk := i0_ZCFCN_d_RISING.y0;
        Delay_Reset_ZCE := i0_ZCFCN_d_RISING.y1;
        (* MATLAB Function: '<S23>/rarx' *)
        (* % Was a reset trigered? *)
        (* MATLAB Function 'Recursive Estimation/rarx/rarx': '<S38>:1' *)
        (* Copyright 2015-2018 The MathWorks, Inc. *)
        (* Get the estimator object. Use the arx estimator with nb=0 *)
        (* '<S38>:1:17' if isempty(arxEstimator) *)
        IF  NOT c_arxEstimator_not_e THEN 
            (* '<S38>:1:18' arxEstimator = recursiveEstimation.internal.rpoly.getEstimator(... *)
            (* '<S38>:1:19'         'arx',... *)
            (* '<S38>:1:20'         algorithmParams); *)
            c_arxEstimator_not_e := TRUE;
        END_IF;
        (* If user triggered a reset, communicate this to the estimator *)
        (* '<S38>:1:24' if hasTriggeredReset *)
        (* Update algorithm states, perform estimation *)
        (* % States *)
        (* % new IO data *)
        (* '<S38>:1:31' [phiMemory, uMemory, yMemory, regressorsMemory, ... *)
        (* '<S38>:1:32'     theta, L, ... *)
        (* '<S38>:1:33'     A, B, e] = ... *)
        (* '<S38>:1:34'     arxEstimator.estimate(... *)
        (* '<S38>:1:35'     phiMemory, uMemory, yMemory, regressorsMemory, theta, L, ... % States *)
        (* '<S38>:1:36'     yMeas, uMeas,... % new IO data *)
        (* '<S38>:1:37'     isEnabled, adg1, adg2, algorithmParams); *)
        arxEstimator.OutputDataIterator.IteratorPosition := 1;
        arxEstimator.InputDataIterator.IteratorPosition := 1;
        arxEstimator.OutputDataIterator.IteratorPosition := MIN(IN1:=arxEstimator.OutputDataIterator.IteratorPosition + 1, 
            IN2:=2);
        arxEstimator.InputDataIterator.IteratorPosition := MIN(IN1:=arxEstimator.InputDataIterator.IteratorPosition + 1, 
            IN2:=2);
        (* MATLAB Function: '<S23>/rarx' incorporates:
         *  DataTypeConversion: '<S3>/DataTypeConversionEnable'
         *  Delay: '<S3>/delayL'
         *  Delay: '<S3>/delayPhi'
         *  Delay: '<S3>/delayTheta' *)
        FOR kk := 0 TO 8 DO 
            rtb_y[kk] := delayL_DSTATE[kk];
        END_FOR;
        rtb_theta[0] := delayTheta_DSTATE[0];
        rtb_theta[1] := delayTheta_DSTATE[1];
        rtb_theta[2] := delayTheta_DSTATE[2];
        u := Input1 - (((delayPhi_DSTATE[0] * delayTheta_DSTATE[0]) + (delayPhi_DSTATE[1] * delayTheta_DSTATE[1])) + (delayPhi_DSTATE[3] * delayTheta_DSTATE[2])
            );
        IF Input2 <> 0.0 THEN 
            FOR kk := 0 TO 2 DO 
                fTr[kk] := (delayL_DSTATE[(3 * kk) + 2] * delayPhi_DSTATE[3]) + ((delayL_DSTATE[(3 * kk) + 1] * delayPhi_DSTATE[1])
                     + (delayL_DSTATE[3 * kk] * delayPhi_DSTATE[0]));
            END_FOR;
            phi[0] := 0.0;
            rtb_theta[0] := 0.0;
            phi[1] := 0.0;
            rtb_theta[1] := 0.0;
            a1 := (fTr[2] * fTr[2]) + 1.0;
            sqrtA0overA1 := SQRT(1.0 / a1);
            rtb_theta[2] := rtb_y[8] * fTr[2];
            rtb_y[8] := (rtb_y[8] * sqrtA0overA1) - (0.0 / (sqrtA0overA1 * a1));
            phi[2] := rtb_theta[2];
            sqrtA0overA1 := a1;
            a1 := (fTr[1] * fTr[1]) + a1;
            sqrtA0overA1 := SQRT(sqrtA0overA1 / a1);
            sqrtA0timesA1 := sqrtA0overA1 * a1;
            FOR kk := 0 TO 1 DO 
                rtb_theta_tmp := rtb_y[5 - kk];
                rtb_theta_tmp_0 := phi[2 - kk];
                rtb_theta[2 - kk] := (rtb_theta_tmp * fTr[1]) + rtb_theta_tmp_0;
                rtb_y[5 - kk] := (rtb_theta_tmp * sqrtA0overA1) - ((rtb_theta_tmp_0 * fTr[1]) / sqrtA0timesA1);
                phi[2 - kk] := rtb_theta[2 - kk];
            END_FOR;
            sqrtA0overA1 := a1;
            a1 := (fTr[0] * fTr[0]) + a1;
            sqrtA0overA1 := SQRT(sqrtA0overA1 / a1);
            sqrtA0timesA1 := sqrtA0overA1 * a1;
            FOR kk := 0 TO 2 DO 
                rtb_theta_tmp := rtb_y[2 - kk];
                rtb_theta_tmp_0 := phi[2 - kk];
                rtb_theta[2 - kk] := (rtb_theta_tmp * fTr[0]) + rtb_theta_tmp_0;
                rtb_y[2 - kk] := (rtb_theta_tmp * sqrtA0overA1) - ((rtb_theta_tmp_0 * fTr[0]) / sqrtA0timesA1);
                phi[2 - kk] := rtb_theta[2 - kk];
            END_FOR;
            rtb_theta[0] := rtb_theta[0] / a1;
            rtb_theta[1] := rtb_theta[1] / a1;
            rtb_theta[0] := (rtb_theta[0] * u) + delayTheta_DSTATE[0];
            rtb_theta[1] := (rtb_theta[1] * u) + delayTheta_DSTATE[1];
            rtb_theta[2] := ((rtb_theta[2] / a1) * u) + delayTheta_DSTATE[2];
        END_IF;
        rtb_phiMemory[2] := delayPhi_DSTATE[1];
        rtb_phiMemory[1] := delayPhi_DSTATE[0];
        (* Outputs for Atomic SubSystem: '<S1>/Calculate DC Gain1' *)
        (* Product: '<S2>/Divide' incorporates:
         *  MATLAB Function: '<S23>/rarx'
         *  Sum: '<S2>/A(z) Sum of Elements' *)
        (* helper variables *)
        Gain_Not_Filtered := rtb_theta[2] / ((1.0 + rtb_theta[0]) + rtb_theta[1]);
        (* Saturate: '<S2>/Gain_Saturation' *)
        IF Gain_Not_Filtered >= 1.5 THEN 
            (* Outport: '<Root>/Gain_Not_Filtered' *)
            Gain_Not_Filtered := 1.5;
        ELSIF Gain_Not_Filtered <= 0.01 THEN 
            (* Outport: '<Root>/Gain_Not_Filtered' *)
            Gain_Not_Filtered := 0.01;
        END_IF;
        (* End of Saturate: '<S2>/Gain_Saturation' *)
        (* End of Outputs for SubSystem: '<S1>/Calculate DC Gain1' *)
        
        (* Update for Delay: '<S3>/delayTheta' *)
        icLoad := 0;
        delayTheta_DSTATE[0] := rtb_theta[0];
        delayTheta_DSTATE[1] := rtb_theta[1];
        delayTheta_DSTATE[2] := rtb_theta[2];
        (* Update for Delay: '<S3>/delayL' *)
        icLoad_b := 0;
        (* Update for Delay: '<S3>/delayL' *)
        FOR kk := 0 TO 8 DO 
            delayL_DSTATE[kk] := rtb_y[kk];
        END_FOR;
        (* Update for Delay: '<S3>/delayPhi' incorporates:
         *  MATLAB Function: '<S23>/rarx' *)
        icLoad_m := 0;
        delayPhi_DSTATE[0] :=  -Input1;
        delayPhi_DSTATE[1] := rtb_phiMemory[1];
        delayPhi_DSTATE[2] := rtb_phiMemory[2];
        delayPhi_DSTATE[3] := Input;
        (* Update for Delay: '<S3>/delayBufferU' *)
        icLoad_n := 0;
        (* Update for Delay: '<S3>/delayBufferY' *)
        icLoad_k := 0;
        (* Update for Delay: '<S23>/delayBufferRegressors' *)
        icLoad_e := 0;
END_CASE;
END_FUNCTION_BLOCK
